<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DontForget on today is tomorrow's past</title><link>https://ingo-richter.io/tags/dontforget/</link><description>Recent content in DontForget on today is tomorrow's past</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ingo@ingo-richter.io (Ingo Richter)</managingEditor><webMaster>ingo@ingo-richter.io (Ingo Richter)</webMaster><lastBuildDate>Sun, 12 Aug 2018 16:38:57 -0700</lastBuildDate><atom:link href="https://ingo-richter.io/tags/dontforget/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing raw DOM Event Handler in Reactjs</title><link>https://ingo-richter.io/post/testing-dom-event-handler-in-reactjs/</link><pubDate>Sun, 12 Aug 2018 16:38:57 -0700</pubDate><author>ingo@ingo-richter.io (Ingo Richter)</author><guid>https://ingo-richter.io/post/testing-dom-event-handler-in-reactjs/</guid><description>This is a reminder to myself. And to anybody who needs a creative solution to test an event handler directly attached to a DOM node of a react component.
Last Friday I ran into the situation to test my react component to ensure that the state updates correctly when the pointerenter and pointerleave event fires. Testing for these events is usually no big deal when you use reactjs in one way or the other (either web or native).</description></item></channel></rss>