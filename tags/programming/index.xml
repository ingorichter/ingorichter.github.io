<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on today is tomorrow's past</title><link>https://ingo-richter.io/tags/programming/</link><description>Recent content in Programming on today is tomorrow's past</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>ingo@ingo-richter.io (Ingo Richter)</managingEditor><webMaster>ingo@ingo-richter.io (Ingo Richter)</webMaster><lastBuildDate>Tue, 01 Dec 2020 00:00:00 -0800</lastBuildDate><atom:link href="https://ingo-richter.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent Of Code 2020</title><link>https://ingo-richter.io/post/2020/advent-of-code/</link><pubDate>Tue, 01 Dec 2020 00:00:00 -0800</pubDate><author>ingo@ingo-richter.io (Ingo Richter)</author><guid>https://ingo-richter.io/post/2020/advent-of-code/</guid><description>Ho Ho Ho Now that we approach the last month of this extraordinary year, I&amp;rsquo;m looking forward to some coding challenges to distract myself and learn something new. And here it comes AdventOfCode. Sign in with any of the social accounts mentioned on their page and start solving the daily puzzles. The programming language doesn&amp;rsquo;t matter. You can produce the solution with whatever language/tool you like. And don&amp;rsquo;t forget to check AdventOfCode Subreddit for hints, help, and the solutions others have produced.</description></item><item><title>Design for Coffee Ground Distribution Tool Base with OpenSCAD</title><link>https://ingo-richter.io/post/2020/design-a-coffee-ground-distribution-base/</link><pubDate>Sun, 15 Mar 2020 17:40:42 -0700</pubDate><author>ingo@ingo-richter.io (Ingo Richter)</author><guid>https://ingo-richter.io/post/2020/design-a-coffee-ground-distribution-base/</guid><description>TL;DR A friend of mine asked me if I could build something useful with my 3D Printer. He wanted to have something to place his new (and expensive) tamper for ground coffee. I always wanted to design and print something useful on my 3D Printer. And I wanted to learn and use OpenSCAD for a long time. Now I had an excellent reason to learn it.
Create the Design I had no experience with OpenSCAD at all when I started this little project.</description></item><item><title>Learning Crystal With Genetic Algorithms</title><link>https://ingo-richter.io/post/learning-crystal-with-genetic-algorithms/</link><pubDate>Wed, 06 Mar 2019 23:12:52 -0800</pubDate><author>ingo@ingo-richter.io (Ingo Richter)</author><guid>https://ingo-richter.io/post/learning-crystal-with-genetic-algorithms/</guid><description>I like to learn new tools, programming languages, and exciting topics. I recently found the book Genetic Algorithms in Java Basics , and I found the code samples easy enough to understand to &amp;ldquo;translate&amp;rdquo; them to a different programming language for the sole purpose of getting some hands-on experience with a new programming language. I&amp;rsquo;m done with the 2nd chapter of the book and implemented the genetic algorithm described in that chapter to crystal lang.</description></item><item><title>Testing raw DOM Event Handler in Reactjs</title><link>https://ingo-richter.io/post/testing-dom-event-handler-in-reactjs/</link><pubDate>Sun, 12 Aug 2018 16:38:57 -0700</pubDate><author>ingo@ingo-richter.io (Ingo Richter)</author><guid>https://ingo-richter.io/post/testing-dom-event-handler-in-reactjs/</guid><description>This is a reminder to myself. And to anybody who needs a creative solution to test an event handler directly attached to a DOM node of a react component.
Last Friday I ran into the situation to test my react component to ensure that the state updates correctly when the pointerenter and pointerleave event fires. Testing for these events is usually no big deal when you use reactjs in one way or the other (either web or native).</description></item><item><title>Effective Git - Worktrees</title><link>https://ingo-richter.io/post/effective-git---worktrees/</link><pubDate>Wed, 10 May 2017 21:19:27 -0700</pubDate><author>ingo@ingo-richter.io (Ingo Richter)</author><guid>https://ingo-richter.io/post/effective-git---worktrees/</guid><description>You know this situation: you are working on new feature branch of your product. A bunch of files has been changed, nothing has settled yet and lots of uncommitted changes. This is how work in progress looks like. Everything could be alright, but then you are asked to check out that high priority issue that a customer reported.
What I did in this situation
stash my changes with git stash save and provide a meaningful message for when I have to unstash- my changes changes branches and pull from master build the product repro the issue create a new branch for the fix implement the fix and push to the newly created branch let somebody else verify the fix go back to my previous branch git stash pop my work in progress continue working on the feature Introducing Worktrees I was reading git release notes, and I stumbled upon something I haven’t heard before in the git context: worktree.</description></item><item><title>Efficient JavaScript Unit Testing with Jest and Snapshots</title><link>https://ingo-richter.io/post/efficient-unit-testing-with-jest-and-snapshots/</link><pubDate>Thu, 06 Apr 2017 11:55:51 -0700</pubDate><author>ingo@ingo-richter.io (Ingo Richter)</author><guid>https://ingo-richter.io/post/efficient-unit-testing-with-jest-and-snapshots/</guid><description>Let&amp;rsquo;s start with a bold statement:
We all love to write unit great tests for our code. More or less.
— Unknown Programmer
Writing unit tests for my code mostly follows this pattern
Write a test and make it fail (red) Write the function to fix the test (implement function) Start over with step 1 For one of my projects, I was using jest. It&amp;rsquo;s fast now, and it has several features that I highly value.</description></item><item><title>TIL - SIGINFO is awesome</title><link>https://ingo-richter.io/post/til-siginfo-is-awesome/</link><pubDate>Tue, 11 Oct 2016 09:15:51 -0700</pubDate><author>ingo@ingo-richter.io (Ingo Richter)</author><guid>https://ingo-richter.io/post/til-siginfo-is-awesome/</guid><description>Today I learnt something really awesome. If you use a Unix based operating system, then you will be able to send any process a signal. This might be either Ctrl+C or SIGINT to interrupt that process. Or you can send SIGINFO to report the progress of it’s operation. Why this is awesome? Did you ever copy a huge amount of data and cp didn’t tell you how much has data has been copied so far?</description></item><item><title>TIL - Reactjs optimization that cost me some time</title><link>https://ingo-richter.io/post/reactjs-optimizations/</link><pubDate>Mon, 15 Aug 2016 23:15:51 -0700</pubDate><author>ingo@ingo-richter.io (Ingo Richter)</author><guid>https://ingo-richter.io/post/reactjs-optimizations/</guid><description>I was building a Reactjs component, that should toggle between two child components.
&amp;lt;Toggle&amp;gt; &amp;lt;Comp1&amp;gt; &amp;lt;Comp2&amp;gt; &amp;lt;/Toggle&amp;gt; The render method of Toggle looked like this
render() { const content = React.Children.count(this.props.children) &amp;gt; 0 ? this.props.children[0] : this.props.children[1]; return ( ${content} ); } Unfortunately, this didn’t work (index out of bounds), when I passed only one component instead of two. This doesn’t make sense since the Toggle is supposed to toggle between two components.</description></item><item><title>TIL - where to put ant-contrib</title><link>https://ingo-richter.io/post/til-where-to-put-ant-contrib/</link><pubDate>Thu, 16 Jun 2016 20:15:51 -0700</pubDate><author>ingo@ingo-richter.io (Ingo Richter)</author><guid>https://ingo-richter.io/post/til-where-to-put-ant-contrib/</guid><description>I was testing an ant based build script change today. And I thought ant was already retired.
Running the script led to a lot of warnings about a missing library. I asked the person, if there are any dependencies for ant-contrib. His response was &amp;#34;yes, you need to install ant-contrib&amp;#34;.
First of all, I didn’t have ant installed. But that was easy with
irichter@irichter-MacBookPro:~ brew install ant Unfortunately, ant-contrib wasn’t available via homebrew, so I had to download it and place it…​ where?</description></item></channel></rss>