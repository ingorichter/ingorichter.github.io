<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on today is tomorrow's past</title><link>https://ingo-richter.io/categories/git/</link><description>Recent content in Git on today is tomorrow's past</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Wed, 10 May 2017 21:19:27 -0700</lastBuildDate><atom:link href="https://ingo-richter.io/categories/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Effective Git - Worktrees</title><link>https://ingo-richter.io/post/effective-git-worktrees/</link><pubDate>Wed, 10 May 2017 21:19:27 -0700</pubDate><guid>https://ingo-richter.io/post/effective-git-worktrees/</guid><description>You know this situation: you are working on new feature branch of your product. A bunch of files has been changed, nothing has settled yet and lots of uncommitted changes. This is how work in progress looks like. Everything could be alright, but then you are asked to check out that high priority issue that a customer reported.
What I did in this situation
stash my changes with git stash save and provide a meaningful message for when I have to unstash- my changes changes branches and pull from master build the product repro the issue create a new branch for the fix implement the fix and push to the newly created branch let somebody else verify the fix go back to my previous branch git stash pop my work in progress continue working on the feature Introducing Worktrees I was reading git release notes, and I stumbled upon something I haven’t heard before in the git context: worktree.</description></item><item><title>Efficient JavaScript Unit Testing with Jest and Snapshots</title><link>https://ingo-richter.io/post/efficient-unit-testing-with-jest-and-snapshots/</link><pubDate>Thu, 06 Apr 2017 11:55:51 -0700</pubDate><guid>https://ingo-richter.io/post/efficient-unit-testing-with-jest-and-snapshots/</guid><description>Let&amp;rsquo;s start with a bold statement:
We all love to write unit great tests for our code. More or less.
— Unknown Programmer
Writing unit tests for my code mostly follows this pattern
Write a test and make it fail (red) Write the function to fix the test (implement function) Start over with step 1 For one of my projects, I was using jest. It&amp;rsquo;s fast now, and it has several features that I highly value.</description></item></channel></rss>