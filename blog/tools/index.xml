<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tools on Today is Tomorrow's Past</title><link>https://ingo-richter.io/blog/tools/</link><description>Recent content in Tools on Today is Tomorrow's Past</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2025 Ingo Richter</copyright><lastBuildDate>Tue, 28 May 2024 10:23:58 -0700</lastBuildDate><atom:link href="https://ingo-richter.io/blog/tools/index.xml" rel="self" type="application/rss+xml"/><item><title>Adding a Colorful Border Around macOS App Windows</title><link>https://ingo-richter.io/post/2024/adding-a-colorful-border-around-macos-windows/</link><pubDate>Tue, 28 May 2024 10:23:58 -0700</pubDate><guid>https://ingo-richter.io/post/2024/adding-a-colorful-border-around-macos-windows/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>&lt;a href="https://github.com/FelixKratz/JankyBorders" title="JankyBorders">JankyBorders&lt;/a> is a tool that allows you to add a colored border around macOS app windows. This is helpful, especially in dark mode, to better see the window border and identify which application window is in front and active.&lt;/p>
&lt;p>With a simple configuration file, it’s possible to specify the colors for the active and inactive windows. The program has more customizable options than I will discuss here. I focus on defining the colors for the active window and the inactive windows. I will also show how to use gradients and glow for borders.&lt;/p></description></item><item><title>Effective Git - Worktrees</title><link>https://ingo-richter.io/post/effective-git---worktrees/</link><pubDate>Wed, 10 May 2017 21:19:27 -0700</pubDate><guid>https://ingo-richter.io/post/effective-git---worktrees/</guid><description>&lt;p>You know this situation: you are working on new feature branch of your product. A bunch of files has been changed, nothing has settled yet and lots of uncommitted changes. This is how work in progress looks like. Everything could be alright, but then you are asked to check out that high priority issue that a customer reported.&lt;/p></description></item><item><title>Efficient JavaScript Unit Testing with Jest and Snapshots</title><link>https://ingo-richter.io/post/efficient-unit-testing-with-jest-and-snapshots/</link><pubDate>Thu, 06 Apr 2017 11:55:51 -0700</pubDate><guid>https://ingo-richter.io/post/efficient-unit-testing-with-jest-and-snapshots/</guid><description>&lt;p>Let&amp;rsquo;s start with a bold statement:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>We all love to write unit great tests for our code. More or less.&lt;/strong>&lt;/p>
&lt;p>— Unknown Programmer&lt;/p>&lt;/blockquote>
&lt;p>Writing unit tests for my code mostly follows this pattern&lt;/p>
&lt;ol>
&lt;li>Write a test and make it fail (red)&lt;/li>
&lt;li>Write the function to fix the test (implement function)&lt;/li>
&lt;li>Start over with step 1&lt;/li>
&lt;/ol>
&lt;p>For one of my projects, I was using &lt;a href="https://facebook.github.io/jest/">jest&lt;/a>. It&amp;rsquo;s fast now, and it has several features that I highly value. Most of them integrated code coverage and Snapshot testing.&lt;/p></description></item></channel></rss>