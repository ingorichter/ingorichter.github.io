<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Programming on Today is Tomorrow's Past</title><link>https://ingo-richter.io/blog/programming/</link><description>Recent content in Programming on Today is Tomorrow's Past</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© 2025 Ingo Richter</copyright><lastBuildDate>Tue, 01 Dec 2020 00:00:00 -0800</lastBuildDate><atom:link href="https://ingo-richter.io/blog/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Advent Of Code 2020</title><link>https://ingo-richter.io/post/2020/advent-of-code/</link><pubDate>Tue, 01 Dec 2020 00:00:00 -0800</pubDate><guid>https://ingo-richter.io/post/2020/advent-of-code/</guid><description>&lt;h1 id="ho-ho-ho">Ho Ho Ho&lt;/h1>
&lt;p>Now that we approach the last month of this extraordinary year, I&amp;rsquo;m looking forward to some coding challenges to distract myself and learn something new. And here it comes &lt;a href="https://adventofcode.com/" title="AdventOfCode">AdventOfCode&lt;/a>. Sign in with any of the social accounts mentioned on their page and start solving the daily puzzles. The programming language doesn&amp;rsquo;t matter. You can produce the solution with whatever language/tool you like.
And don&amp;rsquo;t forget to check &lt;a href="https://www.reddit.com/r/adventofcode/" title="AdventOfCode Subreddit">AdventOfCode Subreddit&lt;/a> for hints, help, and the solutions others have produced.&lt;/p></description></item><item><title>Design for Coffee Ground Distribution Tool Base with OpenSCAD</title><link>https://ingo-richter.io/post/2020/design-a-coffee-ground-distribution-base/</link><pubDate>Sun, 15 Mar 2020 17:40:42 -0700</pubDate><guid>https://ingo-richter.io/post/2020/design-a-coffee-ground-distribution-base/</guid><description>&lt;h2 id="tldr">TL;DR&lt;/h2>
&lt;p>A friend of mine asked me if I could build something useful with my 3D Printer. He wanted to have something to place his new (and expensive) tamper for ground coffee. I always wanted to design and print something useful on my 3D Printer. And I wanted to learn and use &lt;a href="https://www.OpenSCAD.org/" title="OpenSCAD">OpenSCAD&lt;/a> for a long time. Now I had an excellent reason to learn it.&lt;/p></description></item><item><title>Learning Crystal With Genetic Algorithms</title><link>https://ingo-richter.io/post/learning-crystal-with-genetic-algorithms/</link><pubDate>Wed, 06 Mar 2019 23:12:52 -0800</pubDate><guid>https://ingo-richter.io/post/learning-crystal-with-genetic-algorithms/</guid><description>&lt;p>I like to learn new tools, programming languages, and exciting topics.
I recently found the book &lt;a href="https://www.apress.com/us/book/9781484203293">Genetic Algorithms in Java Basics&lt;/a> , and I found the code samples easy enough to understand to &amp;ldquo;translate&amp;rdquo; them to a different programming language for the sole purpose of getting some hands-on experience with a new programming language.
I&amp;rsquo;m done with the 2nd chapter of the book and implemented the genetic algorithm described in that chapter to crystal lang.&lt;/p></description></item><item><title>Testing raw DOM Event Handler in Reactjs</title><link>https://ingo-richter.io/post/testing-dom-event-handler-in-reactjs/</link><pubDate>Sun, 12 Aug 2018 16:38:57 -0700</pubDate><guid>https://ingo-richter.io/post/testing-dom-event-handler-in-reactjs/</guid><description>&lt;p>This is a reminder to myself. And to anybody who needs a creative solution to test an event handler directly attached to a DOM node of a react component.&lt;/p>
&lt;p>Last Friday I ran into the situation to test my react component to ensure that the state updates correctly when the &lt;code>pointerenter&lt;/code> and &lt;code>pointerleave&lt;/code> event fires.
Testing for these events is usually no big deal when you use reactjs in one way or the other (either web or native). At work we use an internal framework that is react API compatible and implements most of the features of react. Most of them, but not all.&lt;/p></description></item><item><title>Effective Git - Worktrees</title><link>https://ingo-richter.io/post/effective-git---worktrees/</link><pubDate>Wed, 10 May 2017 21:19:27 -0700</pubDate><guid>https://ingo-richter.io/post/effective-git---worktrees/</guid><description>&lt;p>You know this situation: you are working on new feature branch of your product. A bunch of files has been changed, nothing has settled yet and lots of uncommitted changes. This is how work in progress looks like. Everything could be alright, but then you are asked to check out that high priority issue that a customer reported.&lt;/p></description></item><item><title>Efficient JavaScript Unit Testing with Jest and Snapshots</title><link>https://ingo-richter.io/post/efficient-unit-testing-with-jest-and-snapshots/</link><pubDate>Thu, 06 Apr 2017 11:55:51 -0700</pubDate><guid>https://ingo-richter.io/post/efficient-unit-testing-with-jest-and-snapshots/</guid><description>&lt;p>Let&amp;rsquo;s start with a bold statement:&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>We all love to write unit great tests for our code. More or less.&lt;/strong>&lt;/p>
&lt;p>— Unknown Programmer&lt;/p>&lt;/blockquote>
&lt;p>Writing unit tests for my code mostly follows this pattern&lt;/p>
&lt;ol>
&lt;li>Write a test and make it fail (red)&lt;/li>
&lt;li>Write the function to fix the test (implement function)&lt;/li>
&lt;li>Start over with step 1&lt;/li>
&lt;/ol>
&lt;p>For one of my projects, I was using &lt;a href="https://facebook.github.io/jest/">jest&lt;/a>. It&amp;rsquo;s fast now, and it has several features that I highly value. Most of them integrated code coverage and Snapshot testing.&lt;/p></description></item><item><title>TIL - SIGINFO is awesome</title><link>https://ingo-richter.io/post/til---siginfo-is-awesome/</link><pubDate>Tue, 11 Oct 2016 09:15:51 -0700</pubDate><guid>https://ingo-richter.io/post/til---siginfo-is-awesome/</guid><description>&lt;h2 id="til---siginfo-is-awesome">TIL - SIGINFO is awesome&lt;/h2>
&lt;p>Today I learnt something really awesome. If you use a Unix based operating system, then you will be able to send any process a signal. This might be either &lt;code>Ctrl+C&lt;/code> or &lt;strong>SIGINT&lt;/strong> to interrupt that process. Or you can send &lt;strong>SIGINFO&lt;/strong> to report the progress of it&amp;rsquo;s operation. Why this is awesome? Did you ever copy a huge amount of data and &lt;code>cp&lt;/code> didn&amp;rsquo;t tell you how much has data has been copied so far? &lt;strong>SIGINT&lt;/strong> to the rescue.&lt;/p></description></item><item><title>TIL - Reactjs optimization that cost me some time</title><link>https://ingo-richter.io/post/reactjs-optimizations/</link><pubDate>Mon, 15 Aug 2016 23:15:51 -0700</pubDate><guid>https://ingo-richter.io/post/reactjs-optimizations/</guid><description>&lt;p>I was building a Reactjs component, that should toggle between two child components.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-jsx" data-lang="jsx">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1&lt;/span>&lt;span>&amp;lt;&lt;span style="color:#cba6f7">Toggle&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2&lt;/span>&lt;span> &amp;lt;&lt;span style="color:#cba6f7">Comp1&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3&lt;/span>&lt;span> &amp;lt;&lt;span style="color:#cba6f7">Comp2&lt;/span>&amp;gt;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4&lt;/span>&lt;span>&amp;lt;/&lt;span style="color:#cba6f7">Toggle&lt;/span>&amp;gt;&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;p>The &lt;code>render&lt;/code> method of &lt;code>Toggle&lt;/code> looked like this
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#cdd6f4;background-color:#1e1e2e;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-javascript" data-lang="javascript">&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">1&lt;/span>&lt;span>render() {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">2&lt;/span>&lt;span> &lt;span style="color:#cba6f7">const&lt;/span> content &lt;span style="color:#89dceb;font-weight:bold">=&lt;/span> React.Children.count(&lt;span style="color:#cba6f7">this&lt;/span>.props.children) &lt;span style="color:#89dceb;font-weight:bold">&amp;gt;&lt;/span> &lt;span style="color:#fab387">0&lt;/span> &lt;span style="color:#89dceb;font-weight:bold">?&lt;/span> &lt;span style="color:#cba6f7">this&lt;/span>.props.children[&lt;span style="color:#fab387">0&lt;/span>] &lt;span style="color:#89dceb;font-weight:bold">:&lt;/span> &lt;span style="color:#cba6f7">this&lt;/span>.props.children[&lt;span style="color:#fab387">1&lt;/span>];
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">3&lt;/span>&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">4&lt;/span>&lt;span> &lt;span style="color:#cba6f7">return&lt;/span> (
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">5&lt;/span>&lt;span> ${content}
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">6&lt;/span>&lt;span> );
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span style="white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f849c">7&lt;/span>&lt;span>}&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
&lt;/p></description></item><item><title>TIL - where to put ant-contrib</title><link>https://ingo-richter.io/post/til-where-to-put-ant-contrib/</link><pubDate>Thu, 16 Jun 2016 20:15:51 -0700</pubDate><guid>https://ingo-richter.io/post/til-where-to-put-ant-contrib/</guid><description>&lt;p>I was testing an &lt;a href="https://ant.apache.org/">ant&lt;/a> based build script change today. And I thought &lt;a href="https://ant.apache.org/">ant&lt;/a> was already retired.&lt;/p>
&lt;p>Running the script led to a lot of warnings about a missing library. I asked the person, if there are any dependencies for &lt;a href="http://ant-contrib.sourceforge.net/">ant-contrib&lt;/a>. His response was &amp;ldquo;yes, you need to install &lt;a href="http://ant-contrib.sourceforge.net/">ant-contrib&lt;/a>&amp;rdquo;.&lt;/p>
&lt;p>First of all, I didn&amp;rsquo;t have &lt;a href="https://ant.apache.org/">ant&lt;/a> installed. But that was easy with&lt;/p></description></item></channel></rss>