<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DontForget on Today is Tomorrow's Past</title><link>https://ingo-richter.io/blog/dontforget/</link><description>Recent content in DontForget on Today is Tomorrow's Past</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>Â© 2025 Ingo Richter</copyright><lastBuildDate>Sun, 12 Aug 2018 16:38:57 -0700</lastBuildDate><atom:link href="https://ingo-richter.io/blog/dontforget/index.xml" rel="self" type="application/rss+xml"/><item><title>Testing raw DOM Event Handler in Reactjs</title><link>https://ingo-richter.io/post/testing-dom-event-handler-in-reactjs/</link><pubDate>Sun, 12 Aug 2018 16:38:57 -0700</pubDate><guid>https://ingo-richter.io/post/testing-dom-event-handler-in-reactjs/</guid><description>&lt;p>This is a reminder to myself. And to anybody who needs a creative solution to test an event handler directly attached to a DOM node of a react component.&lt;/p>
&lt;p>Last Friday I ran into the situation to test my react component to ensure that the state updates correctly when the &lt;code>pointerenter&lt;/code> and &lt;code>pointerleave&lt;/code> event fires.
Testing for these events is usually no big deal when you use reactjs in one way or the other (either web or native). At work we use an internal framework that is react API compatible and implements most of the features of react. Most of them, but not all.&lt;/p></description></item></channel></rss>