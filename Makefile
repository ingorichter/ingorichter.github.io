.SHELLFLAGS := -eu -o pipefail -c

# PHONY means that there will be no files generated by this task
.PHONY: preview
preview:
	hugo server -F -D --printI18nWarnings --logLevel debug --templateMetrics --templateMetricsHints --disableFastRender --printPathWarnings --printUnusedTemplates

.PHONY: previewlocal
previewlocal:
	hugo --printI18nWarnings --baseURL=http://localhost:8000

.PHONY: build
build:
	hugo --printI18nWarnings --minify

.PHONY: newpost
# make newpost title="This is the title"
newpost:
	hugo new post/$$(date +"%Y")/$$(echo '${title}' | tr '[:upper:]' '[:lower:]' | sed -e 's/ /-/g')/index.md

.PHONY: wallpaper
# make wallpaper
wallpaper:
	@YEAR=$$(date +"%Y"); \
	WEEK=$$(date +"%V"); \
	HUGO_YEAR=$$YEAR HUGO_WEEK=$$WEEK hugo new wallpaper/$$YEAR/week-$$WEEK/index.md -k wallpaper

# make cv19 title="This is the title"
STARTDATE="2020-16-03"
.PHONY: cv19
cv19:
# add 1 day to include the current day
	$(eval DAYS=$(shell echo "($(shell date +%s) - $(shell date -jf "%Y-%d-%m" "2020-16-03" +%s)) / 86400 + 1" | bc))
	hugo new cv19wfh/$$(date +"%Y")/$$(date +"%m")/day$(DAYS)/index.md

.PHONY: updateLazysize
updateLazysize:
# download the javascript library
	curl -v -L https://raw.githubusercontent.com/aFarkas/lazysizes/gh-pages/lazysizes.js -o assets/js/external/lazysizes.js

.PHONY: updateSubmodules
updateSubmodules:
	git submodule update --remote

.PHONY: updateGoModules
updateGoModules:
	hugo mod get -u ./...

.PHONY: screenshotsBaseline
screenshotsBaseline:
	@echo "🔧 Starting Hugo server in background..."
	nohup hugo server --minify --disableFastRender > hugo.log 2>&1 & \
	echo $$! > hugo.pid; \
	echo "⏳ Waiting for Hugo server to become available..."; \
	until curl --silent --head http://localhost:1313 | grep "200 OK" > /dev/null; do \
	  sleep 1; \
	done; \
	echo "🚀 Hugo server is up! Running screenshot script..."; \
	node screenshot.js --baseline; \
	kill `cat hugo.pid`; \
	rm hugo.pid; \
	echo "✅ Screenshots captured and Hugo server stopped."

.PHONY: screenshots
screenshots:
	@echo "🔧 Starting Hugo server in background..."
	nohup hugo server --minify --disableFastRender > hugo.log 2>&1 & \
	echo $$! > hugo.pid; \
	echo "⏳ Waiting for Hugo server to become available..."; \
	until curl --silent --head http://localhost:1313 | grep "200 OK" > /dev/null; do \
	  sleep 1; \
	done; \
	echo "🚀 Hugo server is up! Running screenshot script..."; \
	node screenshot.js; \
	kill `cat hugo.pid`; \
	rm hugo.pid; \
	echo "✅ Screenshots captured and Hugo server stopped."

# Dynamically set PATH to include only the first entry from fnm's Node.js binaries if fnm is installed
NODE_BIN_PATH := $(shell if command -v fnm > /dev/null; then \
    fnm env --use-on-cd | grep PATH | grep bin | cut -d'"' -f2; \
    else echo ""; fi)

# Prepend /bin/sh to PATH and include NODE_BIN_PATH if available
ifneq ($(NODE_BIN_PATH),)
export PATH := /bin/sh:$(NODE_BIN_PATH):$(PATH)
else
export PATH := /bin/sh:$(PATH)
endif

.PHONY: markdownlint-cli2
markdownlint-cli2:
	@echo "🔧 Using npx from: $(NODE_BIN_PATH)"
	@echo "🔧 Running markdownlint-cli2..."
	npx markdownlint-cli2 --config .markdownlint.jsonc content/**/*.md
	@echo "✅ markdownlint-cli2 completed."

.PHONY: markdownlint-cli2-fix
markdownlint-cli2-fix:
	@echo "🔧 Using npx from: $(NODE_BIN_PATH)"
	@echo "🔧 Running markdownlint-cli2 with fix..."
	npx markdownlint-cli2 --config .markdownlint.jsonc content/**/*.md --fix
	@echo "✅ markdownlint-cli2 fix completed.

.PHONY: pythonenv
pythonenv:
	@echo "🔧 Setting up Python virtual environment..."
	python -m venv .venv
	@echo "✅ Python virtual environment created."
	.venv/bin/pip install -r scripts/requirements.txt